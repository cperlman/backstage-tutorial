on: 
  workflow_dispatch:
    inputs: 
      team_name:
        description: 'Team name, will be used to create policy, role and KV store'
        required: true
      azure_object_id:
        description: 'Azure AD group object ID, used for Vault group alias'
        required: true

name: Create KV store for team in Vault
permissions:
  contents: read
  issues: write 
jobs:
  create-issue:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: JasonEtco/create-an-issue@v2
        id: create-issue
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TEAM: ${{ github.event.inputs.team_name }}
          OBJECT_ID: ${{ github.event.inputs.azure_object_id }}
        with:
          filename: .github/ISSUE_TEMPLATE/vault-onboarding-for-team--team-.md
#      - run: 'echo Created issue number ${{ steps.create-issue.outputs.number }}'
#      - run: 'echo Created ${{ steps.create-issue.outputs.url }}'
      - run: echo "issue_number=${{ steps.create-issue.outputs.number }}" >> $GITHUB_OUTPUT
      - run: echo "issue_url=${{ steps.create-issue.outputs.url }}" >> $GITHUB_OUTPUT
    outputs:
      issue_number: ${{ steps.create-issue.outputs.number }}
      issue_url: ${{ steps.create-issue.outputs.url }}  
  call-vault-admin:
    needs: create-issue
    runs-on: ubuntu-latest
    steps:
#      - name: Call Vault Admin
#        env:
#          TEAM: ${{ github.event.inputs.team_name }}
#          OBJECT_ID: ${{ github.event.inputs.azure_object_id }}
#          ISSUE_URL: ${{ needs.create-issue.outputs.issue_url }}  # do we need to pass this to vault admin? can close it in another action?
#        run: 'echo URL: $ISSUE_URL'
      - name: Curl it
        id: call-vault-admin
        env:
          TEAM: ${{ github.event.inputs.team_name }}
          OBJECT_ID: ${{ github.event.inputs.azure_object_id }}
          ISSUE_URL: ${{ needs.create-issue.outputs.issue_url }}
        # update this to call vault admin app instead when that's available
        run: response_status=`curl --silent --connect-timeout 5 --output /dev/null $ISSUE_URL -I -w "%{http_code}\n"`
      - run: echo "status=${{ steps.call-vault-admin.outputs.response_status }}" >> $GITHUB_OUTPUT
      - run: echo "issue_number=${{ needs.create-issue.outputs.issue_number }}" >> $GITHUB_OUTPUT
    outputs:
      status: ${{ steps.call-vault-admin.outputs.status }}
      issue_number: ${{ needs.create-issue.outputs.issue_number }}
  close-issue:
    needs: call-vault-admin
    runs-on: ubuntu-latest
    env: 
      ISSUE_NUMBER: ${{ needs.call-vault-admin.outputs.issue_number }}
#    if: ${{ needs.call-vault-admin.outputs.status }} == 200
    steps: 
#      - env:
#          ISSUE_NUMBER: ${{ needs.call-vault-admin.outputs.issue_number }}
      - run: echo $ISSUE_NUMBER
      - uses: peter-evans/close-issue@v2
        with:
          issue-number: 14
          comment: Onboarding completed!
          token: ${{ secrets.GITHUB_TOKEN }}
#          issue-number: $ISSUE_NUMBER          
          
#      - run: |
#          curl -X POST "https://vauld-admin.rdswf.net/teams -d '{ "team": "$TEAM", "objectId": "$OBJECT_ID" }'


